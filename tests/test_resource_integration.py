import unittest
from datetime import datetime
from ..systems.resource_management import (
    ResourceManager, ResourceType, ResourceProperties,
    ResourceContainer, ResourceTransaction
)

class TestResourceIntegration(unittest.TestCase):
    def setUp(self):
        """Set up test environment before each test"""
        self.resource_manager = ResourceManager()
        self.player_container = "player_inventory"
        self.world_container = "world_storage"
        self.resource_manager.create_container(self.player_container, 1000.0)
        self.resource_manager.create_container(self.world_container, 10000.0)
        
    def test_crafting_integration(self):
        """Test resource integration with crafting system"""
        # Add crafting materials
        materials = [
            (ResourceType.WOOD, 50.0),
            (ResourceType.METAL, 30.0),
            (ResourceType.CRYSTAL, 10.0)
        ]
        
        for resource_type, amount in materials:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        # Simulate crafting process
        result = self.resource_manager.combine_resources(
            self.player_container,
            [rt for rt, _ in materials],
            [amt for _, amt in materials],
            ResourceType.MANA_CRYSTAL
        )
        
        self.assertTrue(result)
        
        # Verify material consumption
        for resource_type, initial_amount in materials:
            current_amount = self.resource_manager.get_resource_amount(
                self.player_container,
                resource_type
            )
            self.assertEqual(current_amount, 0.0)
            
    def test_combat_reward_integration(self):
        """Test resource integration with combat reward system"""
        # Simulate combat rewards
        rewards = [
            (ResourceType.GOLD, 100.0),
            (ResourceType.EXPERIENCE, 50.0),
            (ResourceType.SOUL_SHARD, 1.0)
        ]
        
        for resource_type, amount in rewards:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        # Verify rewards were added
        for resource_type, expected_amount in rewards:
            actual_amount = self.resource_manager.get_resource_amount(
                self.player_container,
                resource_type
            )
            self.assertEqual(actual_amount, expected_amount)
            
    def test_faction_reputation_integration(self):
        """Test resource integration with faction system"""
        # Add faction tokens
        tokens = [
            (ResourceType.KNIGHT_INSIGNIA, 5.0),
            (ResourceType.MAGE_SEAL, 3.0),
            (ResourceType.RANGER_TOKEN, 4.0)
        ]
        
        for resource_type, amount in tokens:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        # Convert tokens to reputation
        initial_reputation = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.REPUTATION
        )
        
        for token_type, amount in tokens:
            self.resource_manager.convert_resource(
                self.player_container,
                token_type,
                ResourceType.REPUTATION,
                amount
            )
            
        final_reputation = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.REPUTATION
        )
        
        # Verify reputation gain (10.0 per token)
        expected_reputation_gain = sum(amount * 10.0 for _, amount in tokens)
        self.assertEqual(final_reputation - initial_reputation, expected_reputation_gain)
        
    def test_seasonal_event_integration(self):
        """Test resource integration with seasonal events"""
        # Add seasonal resources
        self.resource_manager.add_resource(
            self.player_container,
            ResourceType.SEASONAL_ESSENCE,
            100.0
        )
        
        # Simulate time passing (10 seconds)
        self.resource_manager.update(10.0)
        
        # Check regeneration and decay
        amount = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.SEASONAL_ESSENCE
        )
        
        # Should have decayed by 0.2 * 10 = 2.0 and regenerated by 0.1 * 10 = 1.0
        # Net change: -1.0 per second for 10 seconds
        self.assertAlmostEqual(amount, 90.0, places=1)
        
    def test_market_integration(self):
        """Test resource integration with market system"""
        # Set up market inventory
        market_container = "market"
        self.resource_manager.create_container(market_container, 10000.0)
        
        # Add tradeable resources to player
        self.resource_manager.add_resource(
            self.player_container,
            ResourceType.GOLD,
            1000.0
        )
        
        # Add items to market
        market_items = [
            (ResourceType.MANA_CRYSTAL, 10.0),
            (ResourceType.CRYSTAL, 20.0),
            (ResourceType.WOOD, 50.0)
        ]
        
        for resource_type, amount in market_items:
            self.resource_manager.add_resource(
                market_container,
                resource_type,
                amount
            )
            
        # Simulate purchase
        item_cost = 100.0  # Gold
        item_type = ResourceType.MANA_CRYSTAL
        item_amount = 2.0
        
        # Transfer gold to market
        self.resource_manager.transfer_resource(
            self.player_container,
            market_container,
            ResourceType.GOLD,
            item_cost
        )
        
        # Transfer item to player
        self.resource_manager.transfer_resource(
            market_container,
            self.player_container,
            item_type,
            item_amount
        )
        
        # Verify transaction
        player_gold = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.GOLD
        )
        player_item = self.resource_manager.get_resource_amount(
            self.player_container,
            item_type
        )
        
        self.assertEqual(player_gold, 900.0)
        self.assertEqual(player_item, 2.0)
        
    def test_quest_reward_integration(self):
        """Test resource integration with quest system"""
        # Simulate quest completion rewards
        quest_rewards = [
            (ResourceType.GOLD, 500.0),
            (ResourceType.EXPERIENCE, 200.0),
            (ResourceType.REPUTATION, 50.0),
            (ResourceType.DIVINE_ESSENCE, 1.0)
        ]
        
        # Add rewards
        for resource_type, amount in quest_rewards:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        # Verify rewards
        for resource_type, expected_amount in quest_rewards:
            actual_amount = self.resource_manager.get_resource_amount(
                self.player_container,
                resource_type
            )
            self.assertEqual(actual_amount, expected_amount)
            
    def test_complex_resource_combination(self):
        """Test complex resource combinations"""
        # Add source resources
        source_resources = [
            (ResourceType.MANA_CRYSTAL, 5.0),
            (ResourceType.VOID_ESSENCE, 3.0),
            (ResourceType.SOUL_SHARD, 2.0)
        ]
        
        for resource_type, amount in source_resources:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        # Combine Mana Crystal and Void Essence to create Astral Dust
        result = self.resource_manager.combine_resources(
            self.player_container,
            [ResourceType.MANA_CRYSTAL, ResourceType.VOID_ESSENCE],
            [2.0, 1.0],
            ResourceType.ASTRAL_DUST
        )
        
        self.assertTrue(result)
        
        # Verify result
        astral_dust = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.ASTRAL_DUST
        )
        self.assertEqual(astral_dust, 1.5)  # (2.0 + 1.0) * 0.5
        
    def test_advanced_resource_combinations(self):
        """Test advanced resource combinations with complex ratios"""
        # Test Phoenix Feather creation
        resources = [
            (ResourceType.ASTRAL_DUST, 10.0),
            (ResourceType.TEMPORAL_SHARD, 4.0),
            (ResourceType.DIVINE_ESSENCE, 2.0)
        ]
        
        for resource_type, amount in resources:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        result = self.resource_manager.combine_resources(
            self.player_container,
            [rt for rt, _ in resources],
            [5.0, 2.0, 1.0],  # Using minimum required amounts
            ResourceType.PHOENIX_FEATHER
        )
        
        self.assertTrue(result)
        phoenix_feather = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.PHOENIX_FEATHER
        )
        self.assertEqual(phoenix_feather, 0.5)  # Based on formula
        
    def test_specialized_containers(self):
        """Test specialized container types and their properties"""
        # Create different container types
        containers = [
            ("magical_vault", "magical", 1000.0),
            ("void_pocket", "void", 1000.0),
            ("seasonal_storage", "seasonal", 1000.0),
            ("faction_treasury", "faction", 1000.0)
        ]
        
        for container_id, container_type, capacity in containers:
            success = self.resource_manager.create_specialized_container(
                container_id,
                capacity,
                container_type
            )
            self.assertTrue(success)
            
        # Test magical container efficiency
        self.resource_manager.add_resource(
            "magical_vault",
            ResourceType.MANA_CRYSTAL,
            100.0
        )
        magical_amount = self.resource_manager.get_resource_amount(
            "magical_vault",
            ResourceType.MANA_CRYSTAL
        )
        self.assertEqual(magical_amount, 120.0)  # 20% efficiency bonus
        
        # Test void container capacity
        void_container = self.resource_manager.containers["void_pocket"][ResourceType.VOID_ESSENCE]
        self.assertEqual(void_container.total_capacity, 1500.0)  # 50% bonus capacity
        
        # Test seasonal container decay
        self.resource_manager.add_resource(
            "seasonal_storage",
            ResourceType.SEASONAL_ESSENCE,
            100.0
        )
        self.resource_manager.update(10.0)  # 10 seconds
        seasonal_amount = self.resource_manager.get_resource_amount(
            "seasonal_storage",
            ResourceType.SEASONAL_ESSENCE
        )
        # 50% slower decay rate
        self.assertAlmostEqual(seasonal_amount, 95.0, places=1)
        
        # Test faction container conversion bonus
        self.resource_manager.add_resource(
            "faction_treasury",
            ResourceType.KNIGHT_INSIGNIA,
            10.0
        )
        initial_reputation = self.resource_manager.get_resource_amount(
            "faction_treasury",
            ResourceType.REPUTATION
        )
        self.resource_manager.convert_resource(
            "faction_treasury",
            ResourceType.KNIGHT_INSIGNIA,
            ResourceType.REPUTATION,
            10.0
        )
        final_reputation = self.resource_manager.get_resource_amount(
            "faction_treasury",
            ResourceType.REPUTATION
        )
        # 10 * 10 base conversion * 1.15 (15% bonus)
        self.assertEqual(final_reputation - initial_reputation, 115.0)
        
    def test_resource_based_events(self):
        """Test resource-based events and their effects"""
        # Create event container
        self.resource_manager.create_specialized_container(
            "event_storage",
            1000.0,
            "seasonal"
        )
        
        # Test festival event
        festival_resources = [
            (ResourceType.FESTIVAL_TOKEN, 50.0),
            (ResourceType.SEASONAL_ESSENCE, 20.0)
        ]
        
        for resource_type, amount in festival_resources:
            self.resource_manager.add_resource(
                "event_storage",
                resource_type,
                amount
            )
            
        # Convert to event tickets
        result = self.resource_manager.combine_resources(
            "event_storage",
            [ResourceType.SEASONAL_ESSENCE, ResourceType.FESTIVAL_TOKEN],
            [10.0, 5.0],
            ResourceType.EVENT_TICKET
        )
        
        self.assertTrue(result)
        tickets = self.resource_manager.get_resource_amount(
            "event_storage",
            ResourceType.EVENT_TICKET
        )
        self.assertEqual(tickets, 1.0)
        
        # Test multi-faction event
        faction_resources = [
            (ResourceType.KNIGHT_INSIGNIA, 3.0),
            (ResourceType.MAGE_SEAL, 3.0)
        ]
        
        for resource_type, amount in faction_resources:
            self.resource_manager.add_resource(
                "event_storage",
                resource_type,
                amount
            )
            
        # Create guild mark from faction tokens
        result = self.resource_manager.combine_resources(
            "event_storage",
            [rt for rt, _ in faction_resources],
            [3.0, 3.0],
            ResourceType.GUILD_MARK
        )
        
        self.assertTrue(result)
        guild_marks = self.resource_manager.get_resource_amount(
            "event_storage",
            ResourceType.GUILD_MARK
        )
        self.assertEqual(guild_marks, 1.2)  # 6 total tokens * 0.2
        
    def test_advanced_containers(self):
        """Test advanced specialized container types"""
        # Create advanced containers
        containers = [
            ("divine_vault", "divine", 1000.0),
            ("elemental_forge", "elemental", 1000.0),
            ("time_pocket", "temporal", 1000.0),
            ("spirit_well", "ethereal", 1000.0)
        ]
        
        for container_id, container_type, capacity in containers:
            success = self.resource_manager.create_specialized_container(
                container_id,
                capacity,
                container_type
            )
            self.assertTrue(success)
            
        # Test divine container bonuses
        self.resource_manager.add_resource(
            "divine_vault",
            ResourceType.DIVINE_ESSENCE,
            100.0
        )
        divine_amount = self.resource_manager.get_resource_amount(
            "divine_vault",
            ResourceType.DIVINE_ESSENCE
        )
        self.assertEqual(divine_amount, 130.0)  # 30% efficiency bonus
        
        # Test elemental container conversion
        self.resource_manager.add_resource(
            "elemental_forge",
            ResourceType.ELEMENTAL_CORE,
            10.0
        )
        self.resource_manager.convert_resource(
            "elemental_forge",
            ResourceType.ELEMENTAL_CORE,
            ResourceType.MANA,
            5.0
        )
        mana_amount = self.resource_manager.get_resource_amount(
            "elemental_forge",
            ResourceType.MANA
        )
        # Base conversion * (1 + 0.15 bonus)
        self.assertEqual(mana_amount, 575.0)  # 500 * 1.15
        
        # Test temporal container decay
        self.resource_manager.add_resource(
            "time_pocket",
            ResourceType.TEMPORAL_SHARD,
            10.0
        )
        self.resource_manager.update(10.0)  # 10 seconds
        temporal_amount = self.resource_manager.get_resource_amount(
            "time_pocket",
            ResourceType.TEMPORAL_SHARD
        )
        # 40% slower decay rate
        self.assertAlmostEqual(temporal_amount, 7.0, places=1)
        
    def test_advanced_combinations(self):
        """Test advanced resource combinations"""
        # Test Celestial Shard creation
        self.resource_manager.add_resource(
            self.player_container,
            ResourceType.DIVINE_ESSENCE,
            6.0
        )
        self.resource_manager.add_resource(
            self.player_container,
            ResourceType.PHOENIX_FEATHER,
            2.0
        )
        
        result = self.resource_manager.combine_resources(
            self.player_container,
            [ResourceType.DIVINE_ESSENCE, ResourceType.PHOENIX_FEATHER],
            [3.0, 1.0],
            ResourceType.CELESTIAL_SHARD
        )
        
        self.assertTrue(result)
        celestial_amount = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.CELESTIAL_SHARD
        )
        self.assertEqual(celestial_amount, 0.3)
        
        # Test Spirit Crystal creation with bonus
        resources = [
            (ResourceType.SOUL_SHARD, 6.0),
            (ResourceType.DIVINE_ESSENCE, 2.0),
            (ResourceType.VOID_ESSENCE, 4.0)
        ]
        
        for resource_type, amount in resources:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        result = self.resource_manager.combine_resources(
            self.player_container,
            [rt for rt, _ in resources],
            [3.0, 1.0, 2.0],
            ResourceType.SPIRIT_CRYSTAL
        )
        
        self.assertTrue(result)
        spirit_amount = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.SPIRIT_CRYSTAL
        )
        # Base output with scaling bonus
        self.assertAlmostEqual(spirit_amount, 0.55, places=2)
        
    def test_achievements(self):
        """Test resource-based achievements"""
        # Add resources to trigger achievements
        resources = [
            (ResourceType.GOLD, 10000.0),
            (ResourceType.CRYSTAL, 100.0),
            (ResourceType.DIVINE_ESSENCE, 10.0)
        ]
        
        for resource_type, amount in resources:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                amount
            )
            
        # Check achievements
        completed = self.resource_manager.check_achievements(self.player_container)
        self.assertEqual(len(completed), 3)  # Should complete 3 achievements
        
        # Verify rewards
        reputation = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.REPUTATION
        )
        self.assertEqual(reputation, 100.0)  # From Wealthy Adventurer
        
        mana_crystals = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.MANA_CRYSTAL
        )
        self.assertEqual(mana_crystals, 2.0)  # From Crystal Collector
        
        phoenix_feather = self.resource_manager.get_resource_amount(
            self.player_container,
            ResourceType.PHOENIX_FEATHER
        )
        self.assertEqual(phoenix_feather, 1.0)  # From Divine Favor
        
    def test_complex_event_scenarios(self):
        """Test complex event scenarios with multiple resources"""
        # Create event container
        self.resource_manager.create_specialized_container(
            "celestial_event",
            1000.0,
            "divine"
        )
        
        # Add resources for celestial ritual
        ritual_resources = [
            (ResourceType.DIVINE_ESSENCE, 5.0),
            (ResourceType.PHOENIX_FEATHER, 2.0),
            (ResourceType.TEMPORAL_SHARD, 3.0)
        ]
        
        for resource_type, amount in ritual_resources:
            self.resource_manager.add_resource(
                "celestial_event",
                resource_type,
                amount
            )
            
        # Perform multi-step ritual
        # Step 1: Create Celestial Shard
        result = self.resource_manager.combine_resources(
            "celestial_event",
            [ResourceType.DIVINE_ESSENCE, ResourceType.PHOENIX_FEATHER],
            [3.0, 1.0],
            ResourceType.CELESTIAL_SHARD
        )
        self.assertTrue(result)
        
        # Step 2: Create Chrono Crystal
        self.resource_manager.add_resource(
            "celestial_event",
            ResourceType.ASTRAL_DUST,
            6.0
        )
        
        result = self.resource_manager.combine_resources(
            "celestial_event",
            [ResourceType.TEMPORAL_SHARD, ResourceType.ASTRAL_DUST],
            [1.0, 3.0],
            ResourceType.CHRONO_CRYSTAL
        )
        self.assertTrue(result)
        
        # Verify final products
        celestial_shard = self.resource_manager.get_resource_amount(
            "celestial_event",
            ResourceType.CELESTIAL_SHARD
        )
        self.assertEqual(celestial_shard, 0.3)
        
        chrono_crystal = self.resource_manager.get_resource_amount(
            "celestial_event",
            ResourceType.CHRONO_CRYSTAL
        )
        self.assertEqual(chrono_crystal, 1.0)
        
    def test_edge_cases(self):
        """Test edge cases and boundary conditions"""
        # Test container at exact capacity
        self.resource_manager.create_container("edge_container", 100.0)
        self.assertTrue(self.resource_manager.add_resource("edge_container", ResourceType.GOLD, 100.0))
        self.assertFalse(self.resource_manager.add_resource("edge_container", ResourceType.GOLD, 0.1))
        
        # Test minimum resource amounts
        self.assertTrue(self.resource_manager.add_resource("edge_container", ResourceType.MANA, 0.0001))
        self.assertFalse(self.resource_manager.add_resource("edge_container", ResourceType.MANA, -1.0))
        
        # Test resource overflow prevention
        self.resource_manager.create_container("overflow_container", float('inf'))
        large_amount = 1e9
        self.assertTrue(self.resource_manager.add_resource("overflow_container", ResourceType.EXPERIENCE, large_amount))
        self.assertTrue(self.resource_manager.add_resource("overflow_container", ResourceType.EXPERIENCE, large_amount))
        
        # Test concurrent resource operations
        import threading
        def add_resources():
            for _ in range(100):
                self.resource_manager.add_resource("edge_container", ResourceType.ENERGY, 0.1)
                
        threads = [threading.Thread(target=add_resources) for _ in range(10)]
        for thread in threads:
            thread.start()
        for thread in threads:
            thread.join()
            
        energy_amount = self.resource_manager.get_resource_amount("edge_container", ResourceType.ENERGY)
        self.assertLessEqual(energy_amount, 100.0)
        
    def test_error_conditions(self):
        """Test error conditions and invalid operations"""
        # Test invalid container operations
        with self.assertRaises(KeyError):
            self.resource_manager.add_resource("nonexistent_container", ResourceType.GOLD, 100.0)
            
        # Test invalid resource combinations
        self.resource_manager.add_resource(self.player_container, ResourceType.GOLD, 100.0)
        self.resource_manager.add_resource(self.player_container, ResourceType.WOOD, 100.0)
        result = self.resource_manager.combine_resources(
            self.player_container,
            [ResourceType.GOLD, ResourceType.WOOD],
            [50.0, 50.0],
            ResourceType.MANA_CRYSTAL
        )
        self.assertFalse(result)
        
        # Test resource type validation
        with self.assertRaises(ValueError):
            self.resource_manager.add_resource(self.player_container, "INVALID_TYPE", 100.0)
            
    def test_performance_benchmarks(self):
        """Test performance of resource operations"""
        import time
        
        # Benchmark resource addition
        start_time = time.time()
        for _ in range(10000):
            self.resource_manager.add_resource(self.player_container, ResourceType.GOLD, 1.0)
        add_time = time.time() - start_time
        self.assertLess(add_time, 1.0)  # Should complete within 1 second
        
        # Benchmark resource combinations
        self.resource_manager.add_resource(self.player_container, ResourceType.MANA_CRYSTAL, 1000.0)
        self.resource_manager.add_resource(self.player_container, ResourceType.VOID_ESSENCE, 1000.0)
        
        start_time = time.time()
        for _ in range(1000):
            self.resource_manager.combine_resources(
                self.player_container,
                [ResourceType.MANA_CRYSTAL, ResourceType.VOID_ESSENCE],
                [1.0, 1.0],
                ResourceType.ASTRAL_DUST
            )
        combine_time = time.time() - start_time
        self.assertLess(combine_time, 2.0)  # Should complete within 2 seconds
        
        # Benchmark container creation
        start_time = time.time()
        for i in range(1000):
            self.resource_manager.create_specialized_container(
                f"bench_container_{i}",
                100.0,
                "magical"
            )
        create_time = time.time() - start_time
        self.assertLess(create_time, 1.0)  # Should complete within 1 second
        
        # Benchmark achievement checking
        self.resource_manager.add_resource(self.player_container, ResourceType.GOLD, 1000000.0)
        start_time = time.time()
        for _ in range(1000):
            self.resource_manager.check_achievements(self.player_container)
        achievement_time = time.time() - start_time
        self.assertLess(achievement_time, 1.0)  # Should complete within 1 second
        
    def test_system_integration(self):
        """Test integration with combat and quest systems"""
        # Simulate combat rewards
        combat_rewards = [
            (ResourceType.GOLD, 1000.0, 0.1),  # Resource, base amount, variance
            (ResourceType.EXPERIENCE, 500.0, 0.2),
            (ResourceType.SOUL_SHARD, 2.0, 0.05)
        ]
        
        for resource_type, base_amount, variance in combat_rewards:
            # Simulate random variance in combat rewards
            import random
            variance_amount = base_amount * variance
            actual_amount = base_amount + random.uniform(-variance_amount, variance_amount)
            self.resource_manager.add_resource(self.player_container, resource_type, actual_amount)
            
        # Verify combat rewards are within expected ranges
        for resource_type, base_amount, variance in combat_rewards:
            amount = self.resource_manager.get_resource_amount(self.player_container, resource_type)
            self.assertGreaterEqual(amount, base_amount * (1 - variance))
            self.assertLessEqual(amount, base_amount * (1 + variance))
            
        # Test quest reward multipliers
        quest_multiplier = 1.5
        quest_rewards = [
            (ResourceType.GOLD, 500.0),
            (ResourceType.REPUTATION, 100.0)
        ]
        
        for resource_type, base_amount in quest_rewards:
            self.resource_manager.add_resource(
                self.player_container,
                resource_type,
                base_amount * quest_multiplier
            )
            
        # Verify quest rewards with multiplier
        for resource_type, base_amount in quest_rewards:
            amount = self.resource_manager.get_resource_amount(self.player_container, resource_type)
            self.assertEqual(amount, base_amount * quest_multiplier)
            
        # Test resource requirements for quest completion
        required_resources = [
            (ResourceType.CRYSTAL, 50.0),
            (ResourceType.MANA_CRYSTAL, 5.0)
        ]
        
        # Add required resources
        for resource_type, amount in required_resources:
            self.resource_manager.add_resource(self.player_container, resource_type, amount)
            
        # Check if player has required resources
        has_requirements = all(
            self.resource_manager.has_resource(self.player_container, rt, amt)
            for rt, amt in required_resources
        )
        self.assertTrue(has_requirements)
        
        # Consume resources for quest completion
        for resource_type, amount in required_resources:
            self.resource_manager.remove_resource(self.player_container, resource_type, amount)
            
        # Verify resources were consumed
        for resource_type, _ in required_resources:
            amount = self.resource_manager.get_resource_amount(self.player_container, resource_type)
            self.assertEqual(amount, 0.0)

    def test_container_specific_benchmarks(self):
        """Test performance benchmarks for different container types"""
        import time
        import statistics
        
        container_types = [
            ("standard", "standard"),
            ("magical_vault", "magical"),
            ("void_pocket", "void"),
            ("seasonal_storage", "seasonal"),
            ("faction_treasury", "faction"),
            ("divine_vault", "divine"),
            ("elemental_forge", "elemental"),
            ("temporal_pocket", "temporal"),
            ("ethereal_well", "ethereal")
        ]
        
        benchmark_results = {}
        
        # Test resource addition performance for each container type
        for container_id, container_type in container_types:
            self.resource_manager.create_specialized_container(
                container_id,
                1000.0,
                container_type
            )
            
            # Measure addition time
            times = []
            for _ in range(5):  # 5 trials
                start_time = time.time()
                for _ in range(1000):  # 1000 operations per trial
                    self.resource_manager.add_resource(
                        container_id,
                        ResourceType.MANA,
                        1.0
                    )
                times.append(time.time() - start_time)
            
            benchmark_results[f"{container_type}_add"] = {
                "avg": statistics.mean(times),
                "min": min(times),
                "max": max(times)
            }
            
            # Test conversion performance
            times = []
            self.resource_manager.add_resource(container_id, ResourceType.MANA_CRYSTAL, 1000.0)
            for _ in range(5):
                start_time = time.time()
                for _ in range(100):
                    self.resource_manager.convert_resource(
                        container_id,
                        ResourceType.MANA_CRYSTAL,
                        ResourceType.MANA,
                        1.0
                    )
                times.append(time.time() - start_time)
                
            benchmark_results[f"{container_type}_convert"] = {
                "avg": statistics.mean(times),
                "min": min(times),
                "max": max(times)
            }
        
        # Verify performance requirements
        for container_type in [ct for _, ct in container_types]:
            self.assertLess(
                benchmark_results[f"{container_type}_add"]["avg"],
                0.5,  # Average addition time should be under 0.5 seconds
                f"Slow addition performance for {container_type}"
            )
            self.assertLess(
                benchmark_results[f"{container_type}_convert"]["avg"],
                0.2,  # Average conversion time should be under 0.2 seconds
                f"Slow conversion performance for {container_type}"
            )
            
    def test_concurrent_stress(self):
        """Stress test concurrent resource operations"""
        import threading
        import queue
        import random
        
        # Create a queue for operation results
        results_queue = queue.Queue()
        
        def worker(worker_id: int, container_id: str, num_operations: int):
            successes = 0
            failures = 0
            
            for _ in range(num_operations):
                operation = random.choice(["add", "remove", "convert"])
                amount = random.uniform(0.1, 10.0)
                
                try:
                    if operation == "add":
                        success = self.resource_manager.add_resource(
                            container_id,
                            ResourceType.MANA,
                            amount
                        )
                    elif operation == "remove":
                        success = self.resource_manager.remove_resource(
                            container_id,
                            ResourceType.MANA,
                            amount
                        )
                    else:  # convert
                        if self.resource_manager.has_resource(container_id, ResourceType.MANA_CRYSTAL, 1.0):
                            success = self.resource_manager.convert_resource(
                                container_id,
                                ResourceType.MANA_CRYSTAL,
                                ResourceType.MANA,
                                1.0
                            )
                        else:
                            success = False
                            
                    if success:
                        successes += 1
                    else:
                        failures += 1
                except Exception as e:
                    failures += 1
                    
            results_queue.put((worker_id, successes, failures))
            
        # Create test container
        self.resource_manager.create_specialized_container(
            "stress_test",
            10000.0,  # Large capacity
            "magical"
        )
        
        # Add initial resources
        self.resource_manager.add_resource("stress_test", ResourceType.MANA, 5000.0)
        self.resource_manager.add_resource("stress_test", ResourceType.MANA_CRYSTAL, 1000.0)
        
        # Create and start worker threads
        num_threads = 20
        operations_per_thread = 500
        threads = []
        
        for i in range(num_threads):
            thread = threading.Thread(
                target=worker,
                args=(i, "stress_test", operations_per_thread)
            )
            threads.append(thread)
            thread.start()
            
        # Wait for all threads to complete
        for thread in threads:
            thread.join()
            
        # Collect results
        total_successes = 0
        total_failures = 0
        while not results_queue.empty():
            _, successes, failures = results_queue.get()
            total_successes += successes
            total_failures += failures
            
        # Verify results
        total_operations = num_threads * operations_per_thread
        success_rate = total_successes / total_operations
        self.assertGreaterEqual(
            success_rate,
            0.95,  # At least 95% success rate
            f"Low success rate in concurrent operations: {success_rate:.2%}"
        )
        
        # Verify container integrity
        mana = self.resource_manager.get_resource_amount("stress_test", ResourceType.MANA)
        mana_crystals = self.resource_manager.get_resource_amount("stress_test", ResourceType.MANA_CRYSTAL)
        self.assertGreaterEqual(mana, 0.0, "Negative mana amount after stress test")
        self.assertGreaterEqual(mana_crystals, 0.0, "Negative mana crystals after stress test")
        self.assertLessEqual(mana, 10000.0, "Mana amount exceeds container capacity")
        
    def test_crafting_integration(self):
        """Test integration with crafting system"""
        # Initialize crafting resources
        crafting_resources = [
            (ResourceType.WOOD, 100.0),
            (ResourceType.METAL, 50.0),
            (ResourceType.CRYSTAL, 20.0),
            (ResourceType.MANA_CRYSTAL, 10.0)
        ]
        
        # Create specialized crafting container
        self.resource_manager.create_specialized_container(
            "crafting_station",
            1000.0,
            "magical"  # Magical container for crafting bonuses
        )
        
        # Add initial resources
        for resource_type, amount in crafting_resources:
            self.resource_manager.add_resource(
                "crafting_station",
                resource_type,
                amount
            )
            
        # Simulate crafting operations with resource consumption
        crafting_operations = [
            {
                "inputs": [(ResourceType.WOOD, 10.0), (ResourceType.METAL, 5.0)],
                "output": (ResourceType.MANA_CRYSTAL, 1.0)
            },
            {
                "inputs": [(ResourceType.CRYSTAL, 5.0), (ResourceType.MANA_CRYSTAL, 2.0)],
                "output": (ResourceType.VOID_ESSENCE, 1.0)
            }
        ]
        
        for operation in crafting_operations:
            # Verify resource requirements
            has_resources = all(
                self.resource_manager.has_resource("crafting_station", rt, amt)
                for rt, amt in operation["inputs"]
            )
            self.assertTrue(has_resources)
            
            # Consume input resources
            for resource_type, amount in operation["inputs"]:
                self.resource_manager.remove_resource(
                    "crafting_station",
                    resource_type,
                    amount
                )
                
            # Add crafted output
            output_type, output_amount = operation["output"]
            self.resource_manager.add_resource(
                "crafting_station",
                output_type,
                output_amount * 1.2  # 20% crafting bonus from magical container
            )
            
        # Verify final resource state
        expected_resources = {
            ResourceType.WOOD: 90.0,      # 100 - 10
            ResourceType.METAL: 45.0,     # 50 - 5
            ResourceType.CRYSTAL: 15.0,   # 20 - 5
            ResourceType.MANA_CRYSTAL: 9.0,  # 10 - 2 + 1
            ResourceType.VOID_ESSENCE: 1.2   # 0 + 1 * 1.2
        }
        
        for resource_type, expected_amount in expected_resources.items():
            actual_amount = self.resource_manager.get_resource_amount(
                "crafting_station",
                resource_type
            )
            self.assertAlmostEqual(
                actual_amount,
                expected_amount,
                places=1,
                msg=f"Incorrect amount for {resource_type}"
            )

    def test_market_system_integration(self):
        """Test integration with market system including price fluctuations and trading"""
        # Create market container and trader containers
        self.resource_manager.create_specialized_container("market", 10000.0, "market")
        self.resource_manager.create_specialized_container("trader1", 1000.0, "merchant")
        self.resource_manager.create_specialized_container("trader2", 1000.0, "merchant")
        
        # Initialize market with resources
        market_resources = [
            (ResourceType.GOLD, 5000.0),
            (ResourceType.CRYSTAL, 200.0),
            (ResourceType.MANA_CRYSTAL, 50.0)
        ]
        
        for resource_type, amount in market_resources:
            self.resource_manager.add_resource("market", resource_type, amount)
            
        # Test buy operation with price fluctuation
        initial_price = 10.0  # Gold per Crystal
        # Buy crystals, should increase price
        for _ in range(5):
            self.resource_manager.add_resource("trader1", ResourceType.GOLD, 100.0)
            success = self.resource_manager.trade_resources(
                "trader1",
                "market",
                ResourceType.GOLD,
                ResourceType.CRYSTAL,
                10.0,  # Amount of gold
                1.0    # Amount of crystals
            )
            self.assertTrue(success)
            
        # Verify price increased
        new_price = self.resource_manager.get_market_price("market", ResourceType.CRYSTAL)
        self.assertGreater(new_price, initial_price)
        
        # Test sell operation with price fluctuation
        # Sell crystals back, should decrease price
        for _ in range(5):
            success = self.resource_manager.trade_resources(
                "trader1",
                "market",
                ResourceType.CRYSTAL,
                ResourceType.GOLD,
                1.0,    # Amount of crystals
                8.0     # Amount of gold (lower due to sell price being lower than buy)
            )
            self.assertTrue(success)
            
        final_price = self.resource_manager.get_market_price("market", ResourceType.CRYSTAL)
        self.assertLess(final_price, new_price)
        
    def test_resource_combination_benchmarks(self):
        """Test performance of complex resource combinations"""
        import time
        import statistics
        
        # Initialize test container with resources
        self.resource_manager.create_specialized_container("combo_test", 10000.0, "magical")
        test_resources = [
            (ResourceType.DIVINE_ESSENCE, 1000.0),
            (ResourceType.PHOENIX_FEATHER, 1000.0),
            (ResourceType.TEMPORAL_SHARD, 1000.0),
            (ResourceType.ASTRAL_DUST, 1000.0),
            (ResourceType.SOUL_SHARD, 1000.0),
            (ResourceType.VOID_ESSENCE, 1000.0)
        ]
        
        for resource_type, amount in test_resources:
            self.resource_manager.add_resource("combo_test", resource_type, amount)
            
        combinations = [
            {
                "inputs": [ResourceType.DIVINE_ESSENCE, ResourceType.PHOENIX_FEATHER],
                "amounts": [3.0, 1.0],
                "output": ResourceType.CELESTIAL_SHARD
            },
            {
                "inputs": [ResourceType.TEMPORAL_SHARD, ResourceType.ASTRAL_DUST],
                "amounts": [1.0, 3.0],
                "output": ResourceType.CHRONO_CRYSTAL
            },
            {
                "inputs": [ResourceType.SOUL_SHARD, ResourceType.VOID_ESSENCE],
                "amounts": [2.0, 2.0],
                "output": ResourceType.SPIRIT_CRYSTAL
            }
        ]
        
        benchmark_results = {}
        
        # Benchmark each combination
        for i, combo in enumerate(combinations):
            times = []
            for _ in range(5):  # 5 trials
                start_time = time.time()
                for _ in range(100):  # 100 combinations per trial
                    self.resource_manager.combine_resources(
                        "combo_test",
                        combo["inputs"],
                        combo["amounts"],
                        combo["output"]
                    )
                times.append(time.time() - start_time)
                
            benchmark_results[f"combination_{i}"] = {
                "avg": statistics.mean(times),
                "min": min(times),
                "max": max(times)
            }
            
        # Verify performance requirements
        for combo_name, results in benchmark_results.items():
            self.assertLess(
                results["avg"],
                0.3,  # Average combination time should be under 0.3 seconds
                f"Slow combination performance for {combo_name}"
            )
            
    def test_container_specific_stress(self):
        """Stress test specific container types under heavy load"""
        import threading
        import queue
        import random
        
        containers = [
            ("divine_test", "divine", 5000.0),
            ("elemental_test", "elemental", 5000.0),
            ("temporal_test", "temporal", 5000.0),
            ("ethereal_test", "ethereal", 5000.0)
        ]
        
        # Create containers
        for container_id, container_type, capacity in containers:
            self.resource_manager.create_specialized_container(
                container_id,
                capacity,
                container_type
            )
            
        def stress_worker(container_id: str, resource_types: list, num_operations: int, results: queue.Queue):
            successes = 0
            failures = 0
            
            for _ in range(num_operations):
                operation = random.choice(["add", "remove", "convert", "combine"])
                
                try:
                    if operation == "add":
                        resource_type = random.choice(resource_types)
                        amount = random.uniform(0.1, 10.0)
                        success = self.resource_manager.add_resource(
                            container_id,
                            resource_type,
                            amount
                        )
                    elif operation == "remove":
                        resource_type = random.choice(resource_types)
                        amount = random.uniform(0.1, 5.0)
                        success = self.resource_manager.remove_resource(
                            container_id,
                            resource_type,
                            amount
                        )
                    elif operation == "convert":
                        if self.resource_manager.has_resource(container_id, ResourceType.MANA_CRYSTAL, 1.0):
                            success = self.resource_manager.convert_resource(
                                container_id,
                                ResourceType.MANA_CRYSTAL,
                                ResourceType.MANA,
                                1.0
                            )
                        else:
                            success = False
                    else:  # combine
                        if all(self.resource_manager.has_resource(container_id, rt, 2.0) 
                              for rt in [ResourceType.DIVINE_ESSENCE, ResourceType.PHOENIX_FEATHER]):
                            success = self.resource_manager.combine_resources(
                                container_id,
                                [ResourceType.DIVINE_ESSENCE, ResourceType.PHOENIX_FEATHER],
                                [2.0, 2.0],
                                ResourceType.CELESTIAL_SHARD
                            )
                        else:
                            success = False
                            
                    if success:
                        successes += 1
                    else:
                        failures += 1
                except Exception as e:
                    failures += 1
                    
            results.put((container_id, successes, failures))
            
        # Test each container type
        for container_id, container_type, _ in containers:
            # Initialize container with resources
            initial_resources = [
                (ResourceType.MANA, 1000.0),
                (ResourceType.MANA_CRYSTAL, 200.0),
                (ResourceType.DIVINE_ESSENCE, 100.0),
                (ResourceType.PHOENIX_FEATHER, 50.0)
            ]
            
            for resource_type, amount in initial_resources:
                self.resource_manager.add_resource(container_id, resource_type, amount)
                
            # Create worker threads
            results_queue = queue.Queue()
            threads = []
            num_threads = 10
            operations_per_thread = 200
            
            for i in range(num_threads):
                thread = threading.Thread(
                    target=stress_worker,
                    args=(
                        container_id,
                        [rt for rt, _ in initial_resources],
                        operations_per_thread,
                        results_queue
                    )
                )
                threads.append(thread)
                thread.start()
                
            # Wait for completion
            for thread in threads:
                thread.join()
                
            # Analyze results
            total_successes = 0
            total_failures = 0
            while not results_queue.empty():
                _, successes, failures = results_queue.get()
                total_successes += successes
                total_failures += failures
                
            total_operations = num_threads * operations_per_thread
            success_rate = total_successes / total_operations
            
            # Verify success rate and container integrity
            self.assertGreaterEqual(
                success_rate,
                0.90,  # At least 90% success rate
                f"Low success rate for {container_type}: {success_rate:.2%}"
            )
            
            # Verify no negative resources
            for resource_type, _ in initial_resources:
                amount = self.resource_manager.get_resource_amount(container_id, resource_type)
                self.assertGreaterEqual(amount, 0.0, f"Negative resource amount for {resource_type}")
                self.assertLessEqual(amount, 5000.0, f"Resource amount exceeds capacity for {resource_type}")

    def test_advanced_market_features(self):
        """Test advanced market features including auctions and bulk trades"""
        # Create market and trader containers
        self.resource_manager.create_specialized_container("auction_house", 100000.0, "market")
        self.resource_manager.create_specialized_container("bulk_trader1", 10000.0, "merchant")
        self.resource_manager.create_specialized_container("bulk_trader2", 10000.0, "merchant")
        
        # Initialize traders with resources
        initial_resources = [
            ("bulk_trader1", [(ResourceType.GOLD, 50000.0), (ResourceType.CRYSTAL, 1000.0)]),
            ("bulk_trader2", [(ResourceType.GOLD, 40000.0), (ResourceType.MANA_CRYSTAL, 500.0)])
        ]
        
        for trader_id, resources in initial_resources:
            for resource_type, amount in resources:
                self.resource_manager.add_resource(trader_id, resource_type, amount)
                
        # Test auction system
        # Set up auction for rare resources
        auction_items = [
            (ResourceType.PHOENIX_FEATHER, 5.0, 1000.0),  # resource, amount, starting_price
            (ResourceType.CELESTIAL_SHARD, 2.0, 2000.0)
        ]
        
        for resource_type, amount, starting_price in auction_items:
            self.resource_manager.add_resource("auction_house", resource_type, amount)
            # Start auction
            auction_id = self.resource_manager.start_auction(
                "auction_house",
                resource_type,
                amount,
                starting_price,
                duration=5.0  # 5 second auction
            )
            
            # Place bids
            bids = [
                ("bulk_trader1", starting_price + 100.0),
                ("bulk_trader2", starting_price + 200.0),
                ("bulk_trader1", starting_price + 300.0)
            ]
            
            for bidder_id, bid_amount in bids:
                success = self.resource_manager.place_bid(
                    auction_id,
                    bidder_id,
                    bid_amount
                )
                self.assertTrue(success)
                
            # Wait for auction to end
            import time
            time.sleep(5.1)
            
            # Verify auction results
            winner_id, winning_bid = self.resource_manager.get_auction_result(auction_id)
            self.assertEqual(winner_id, "bulk_trader1")
            self.assertEqual(winning_bid, starting_price + 300.0)
            
            # Verify resource transfer
            winner_amount = self.resource_manager.get_resource_amount(
                winner_id,
                resource_type
            )
            self.assertEqual(winner_amount, amount)
            
        # Test bulk trading system
        bulk_trades = [
            {
                "seller": "bulk_trader1",
                "buyer": "bulk_trader2",
                "resources": [
                    (ResourceType.CRYSTAL, 500.0, 10.0),  # resource, amount, price_per_unit
                    (ResourceType.GOLD, 1000.0, 1.0)
                ]
            },
            {
                "seller": "bulk_trader2",
                "buyer": "bulk_trader1",
                "resources": [
                    (ResourceType.MANA_CRYSTAL, 200.0, 20.0)
                ]
            }
        ]
        
        for trade in bulk_trades:
            # Calculate total cost
            total_cost = sum(amount * price for _, amount, price in trade["resources"])
            
            # Verify buyer has enough gold
            self.assertTrue(
                self.resource_manager.has_resource(
                    trade["buyer"],
                    ResourceType.GOLD,
                    total_cost
                )
            )
            
            # Execute bulk trade
            success = self.resource_manager.execute_bulk_trade(
                trade["seller"],
                trade["buyer"],
                trade["resources"]
            )
            self.assertTrue(success)
            
            # Verify resource transfers
            for resource_type, amount, _ in trade["resources"]:
                buyer_amount = self.resource_manager.get_resource_amount(
                    trade["buyer"],
                    resource_type
                )
                self.assertGreaterEqual(buyer_amount, amount)
                
    def test_complex_stress_scenarios(self):
        """Test complex stress scenarios with multiple operations and containers"""
        import threading
        import queue
        import random
        import time
        
        # Create multiple container types for stress testing
        containers = [
            ("market_stress", "market", 100000.0),
            ("divine_stress", "divine", 50000.0),
            ("void_stress", "void", 50000.0),
            ("ethereal_stress", "ethereal", 50000.0)
        ]
        
        for container_id, container_type, capacity in containers:
            self.resource_manager.create_specialized_container(
                container_id,
                capacity,
                container_type
            )
            
        # Initialize containers with resources
        initial_resources = [
            (ResourceType.GOLD, 10000.0),
            (ResourceType.MANA, 5000.0),
            (ResourceType.CRYSTAL, 1000.0),
            (ResourceType.DIVINE_ESSENCE, 100.0),
            (ResourceType.VOID_ESSENCE, 100.0)
        ]
        
        for container_id, _, _ in containers:
            for resource_type, amount in initial_resources:
                self.resource_manager.add_resource(container_id, resource_type, amount)
                
        def complex_worker(worker_id: int, container_ids: list, num_operations: int, results: queue.Queue):
            successes = 0
            failures = 0
            
            for _ in range(num_operations):
                operation = random.choice([
                    "transfer", "convert", "combine", "market_trade",
                    "bulk_operation", "container_swap"
                ])
                
                try:
                    if operation == "transfer":
                        # Transfer between random containers
                        source_id = random.choice(container_ids)
                        target_id = random.choice([c for c in container_ids if c != source_id])
                        resource_type = random.choice([rt for rt, _ in initial_resources])
                        amount = random.uniform(0.1, 10.0)
                        
                        if self.resource_manager.has_resource(source_id, resource_type, amount):
                            success = self.resource_manager.transfer_resources(
                                source_id,
                                target_id,
                                resource_type,
                                amount
                            )
                        else:
                            success = False
                            
                    elif operation == "convert":
                        # Convert resources in random container
                        container_id = random.choice(container_ids)
                        if self.resource_manager.has_resource(container_id, ResourceType.CRYSTAL, 2.0):
                            success = self.resource_manager.convert_resource(
                                container_id,
                                ResourceType.CRYSTAL,
                                ResourceType.MANA,
                                2.0
                            )
                        else:
                            success = False
                            
                    elif operation == "combine":
                        # Combine resources in random container
                        container_id = random.choice(container_ids)
                        if all(self.resource_manager.has_resource(container_id, rt, 2.0) 
                              for rt in [ResourceType.DIVINE_ESSENCE, ResourceType.VOID_ESSENCE]):
                            success = self.resource_manager.combine_resources(
                                container_id,
                                [ResourceType.DIVINE_ESSENCE, ResourceType.VOID_ESSENCE],
                                [2.0, 2.0],
                                ResourceType.CELESTIAL_SHARD
                            )
                        else:
                            success = False
                            
                    elif operation == "market_trade":
                        # Execute market trade
                        if "market_stress" in container_ids:
                            buyer_id = random.choice([c for c in container_ids if c != "market_stress"])
                            if self.resource_manager.has_resource(buyer_id, ResourceType.GOLD, 100.0):
                                success = self.resource_manager.trade_resources(
                                    buyer_id,
                                    "market_stress",
                                    ResourceType.GOLD,
                                    ResourceType.CRYSTAL,
                                    100.0,
                                    10.0
                                )
                            else:
                                success = False
                        else:
                            success = False
                            
                    elif operation == "bulk_operation":
                        # Perform multiple resource operations
                        container_id = random.choice(container_ids)
                        operations = []
                        for _ in range(5):
                            resource_type = random.choice([rt for rt, _ in initial_resources])
                            amount = random.uniform(0.1, 5.0)
                            operations.append((resource_type, amount))
                            
                        success = all(
                            self.resource_manager.add_resource(container_id, rt, amt)
                            for rt, amt in operations
                        )
                        
                    else:  # container_swap
                        # Swap all resources between two containers
                        container1 = random.choice(container_ids)
                        container2 = random.choice([c for c in container_ids if c != container1])
                        success = self.resource_manager.swap_containers(container1, container2)
                        
                    if success:
                        successes += 1
                    else:
                        failures += 1
                except Exception as e:
                    failures += 1
                    
            results.queue.put((worker_id, successes, failures))
            
        # Run stress test with multiple threads
        results_queue = queue.Queue()
        threads = []
        num_threads = 20
        operations_per_thread = 100
        
        start_time = time.time()
        
        for i in range(num_threads):
            thread = threading.Thread(
                target=complex_worker,
                args=(
                    i,
                    [c[0] for c in containers],
                    operations_per_thread,
                    results_queue
                )
            )
            threads.append(thread)
            thread.start()
            
        # Wait for completion
        for thread in threads:
            thread.join()
            
        end_time = time.time()
        total_time = end_time - start_time
        
        # Analyze results
        total_successes = 0
        total_failures = 0
        while not results_queue.empty():
            _, successes, failures = results_queue.get()
            total_successes += successes
            total_failures += failures
            
        total_operations = num_threads * operations_per_thread
        success_rate = total_successes / total_operations
        
        # Verify test results
        self.assertGreaterEqual(
            success_rate,
            0.85,  # At least 85% success rate for complex operations
            f"Low success rate in complex operations: {success_rate:.2%}"
        )
        
        self.assertLess(
            total_time,
            10.0,  # Should complete within 10 seconds
            f"Slow performance in complex operations: {total_time:.2f} seconds"
        )
        
        # Verify container integrity
        for container_id, _, capacity in containers:
            for resource_type, _ in initial_resources:
                amount = self.resource_manager.get_resource_amount(container_id, resource_type)
                self.assertGreaterEqual(amount, 0.0, f"Negative resource amount in {container_id}")
                self.assertLessEqual(amount, capacity, f"Resource amount exceeds capacity in {container_id}")

    def test_advanced_market_mechanics(self):
        """Test advanced market mechanics including order books and price history"""
        # Create market and trader containers
        self.resource_manager.create_specialized_container("advanced_market", 100000.0, "market")
        self.resource_manager.create_specialized_container("market_trader1", 10000.0, "merchant")
        self.resource_manager.create_specialized_container("market_trader2", 10000.0, "merchant")
        
        # Initialize traders with resources
        initial_resources = [
            ("market_trader1", [(ResourceType.GOLD, 20000.0), (ResourceType.CRYSTAL, 500.0)]),
            ("market_trader2", [(ResourceType.GOLD, 25000.0), (ResourceType.MANA_CRYSTAL, 300.0)])
        ]
        
        for trader_id, resources in initial_resources:
            for resource_type, amount in resources:
                self.resource_manager.add_resource(trader_id, resource_type, amount)
                
        # Test limit orders
        # Place buy orders
        buy_orders = [
            ("market_trader1", ResourceType.MANA_CRYSTAL, 50.0, 95.0),  # trader, resource, amount, price
            ("market_trader2", ResourceType.CRYSTAL, 100.0, 85.0)
        ]
        
        for trader_id, resource_type, amount, price in buy_orders:
            order_id = self.resource_manager.place_limit_order(
                trader_id,
                "advanced_market",
                "buy",
                resource_type,
                amount,
                price
            )
            self.assertIsNotNone(order_id)
            
        # Place sell orders
        sell_orders = [
            ("market_trader1", ResourceType.CRYSTAL, 200.0, 90.0),
            ("market_trader2", ResourceType.MANA_CRYSTAL, 150.0, 100.0)
        ]
        
        for trader_id, resource_type, amount, price in sell_orders:
            order_id = self.resource_manager.place_limit_order(
                trader_id,
                "advanced_market",
                "sell",
                resource_type,
                amount,
                price
            )
            self.assertIsNotNone(order_id)
            
        # Test order matching
        matches = self.resource_manager.process_order_matches("advanced_market")
        self.assertGreater(len(matches), 0)
        
        # Verify order book state
        crystal_orders = self.resource_manager.get_order_book(
            "advanced_market",
            ResourceType.CRYSTAL
        )
        self.assertIn("buy_orders", crystal_orders)
        self.assertIn("sell_orders", crystal_orders)
        
        # Test price history tracking
        price_history = self.resource_manager.get_price_history(
            "advanced_market",
            ResourceType.CRYSTAL,
            timeframe=3600  # Last hour
        )
        self.assertGreater(len(price_history), 0)
        
        # Test market orders
        # Place market buy order
        success = self.resource_manager.place_market_order(
            "market_trader1",
            "advanced_market",
            "buy",
            ResourceType.MANA_CRYSTAL,
            25.0
        )
        self.assertTrue(success)
        
        # Place market sell order
        success = self.resource_manager.place_market_order(
            "market_trader2",
            "advanced_market",
            "sell",
            ResourceType.CRYSTAL,
            50.0
        )
        self.assertTrue(success)
        
        # Test order cancellation
        active_orders = self.resource_manager.get_active_orders(
            "advanced_market",
            "market_trader1"
        )
        if active_orders:
            order_id = active_orders[0]["id"]
            success = self.resource_manager.cancel_order(
                "advanced_market",
                order_id
            )
            self.assertTrue(success)
            
        # Test price statistics
        stats = self.resource_manager.get_price_statistics(
            "advanced_market",
            ResourceType.CRYSTAL,
            timeframe=3600  # Last hour
        )
        self.assertIn("average", stats)
        self.assertIn("high", stats)
        self.assertIn("low", stats)
        self.assertIn("volume", stats)
        
        # Test market volatility calculation
        volatility = self.resource_manager.calculate_market_volatility(
            "advanced_market",
            ResourceType.CRYSTAL,
            timeframe=3600  # Last hour
        )
        self.assertGreaterEqual(volatility, 0.0)
        self.assertLessEqual(volatility, 1.0)
        
        # Verify final trader balances
        for trader_id, _ in initial_resources:
            gold_balance = self.resource_manager.get_resource_amount(
                trader_id,
                ResourceType.GOLD
            )
            self.assertGreaterEqual(gold_balance, 0.0)
            
            # Verify no pending orders use more resources than available
            pending_orders = self.resource_manager.get_active_orders(
                "advanced_market",
                trader_id
            )
            for order in pending_orders:
                if order["type"] == "buy":
                    self.assertLessEqual(
                        order["amount"] * order["price"],
                        gold_balance
                    )
                else:  # sell order
                    resource_balance = self.resource_manager.get_resource_amount(
                        trader_id,
                        order["resource_type"]
                    )
                    self.assertLessEqual(order["amount"], resource_balance)

    def test_market_container_benchmarks(self):
        """Test performance benchmarks for market container operations"""
        import time
        import statistics
        
        # Create market container
        self.resource_manager.create_specialized_container("benchmark_market", 100000.0, "market")
        
        # Initialize with resources
        initial_resources = [
            (ResourceType.GOLD, 50000.0),
            (ResourceType.CRYSTAL, 1000.0),
            (ResourceType.MANA_CRYSTAL, 500.0)
        ]
        
        for resource_type, amount in initial_resources:
            self.resource_manager.add_resource("benchmark_market", resource_type, amount)
            
        # Benchmark limit order placement
        limit_order_times = []
        for _ in range(5):  # 5 trials
            start_time = time.time()
            for _ in range(100):  # 100 orders per trial
                self.resource_manager.place_limit_order(
                    "benchmark_market",
                    "benchmark_market",
                    "sell",
                    ResourceType.CRYSTAL,
                    1.0,
                    100.0
                )
            limit_order_times.append(time.time() - start_time)
            
        avg_limit_order_time = statistics.mean(limit_order_times)
        self.assertLess(avg_limit_order_time, 0.5)  # Should complete within 0.5 seconds
        
        # Benchmark order matching
        matching_times = []
        for _ in range(5):
            # Place 100 buy and sell orders
            for _ in range(100):
                self.resource_manager.place_limit_order(
                    "benchmark_market",
                    "benchmark_market",
                    "buy",
                    ResourceType.CRYSTAL,
                    1.0,
                    95.0
                )
                self.resource_manager.place_limit_order(
                    "benchmark_market",
                    "benchmark_market",
                    "sell",
                    ResourceType.CRYSTAL,
                    1.0,
                    105.0
                )
                
            start_time = time.time()
            self.resource_manager.process_order_matches("benchmark_market")
            matching_times.append(time.time() - start_time)
            
        avg_matching_time = statistics.mean(matching_times)
        self.assertLess(avg_matching_time, 1.0)  # Should complete within 1 second
        
        # Benchmark price history queries
        query_times = []
        for _ in range(5):
            start_time = time.time()
            for _ in range(100):
                self.resource_manager.get_price_history(
                    "benchmark_market",
                    ResourceType.CRYSTAL,
                    timeframe=3600
                )
            query_times.append(time.time() - start_time)
            
        avg_query_time = statistics.mean(query_times)
        self.assertLess(avg_query_time, 0.3)  # Should complete within 0.3 seconds
        
        # Benchmark market order execution
        market_order_times = []
        for _ in range(5):
            start_time = time.time()
            for _ in range(100):
                self.resource_manager.place_market_order(
                    "benchmark_market",
                    "benchmark_market",
                    "buy",
                    ResourceType.CRYSTAL,
                    1.0
                )
            market_order_times.append(time.time() - start_time)
            
        avg_market_order_time = statistics.mean(market_order_times)
        self.assertLess(avg_market_order_time, 0.4)  # Should complete within 0.4 seconds
        
        # Benchmark order book updates
        order_book_times = []
        for _ in range(5):
            start_time = time.time()
            for _ in range(100):
                self.resource_manager.get_order_book(
                    "benchmark_market",
                    ResourceType.CRYSTAL
                )
            order_book_times.append(time.time() - start_time)
            
        avg_order_book_time = statistics.mean(order_book_times)
        self.assertLess(avg_order_book_time, 0.2)  # Should complete within 0.2 seconds
        
        # Print benchmark results
        print(f"\nMarket Container Benchmark Results:")
        print(f"Average limit order placement time: {avg_limit_order_time:.3f}s")
        print(f"Average order matching time: {avg_matching_time:.3f}s")
        print(f"Average price history query time: {avg_query_time:.3f}s")
        print(f"Average market order execution time: {avg_market_order_time:.3f}s")
        print(f"Average order book update time: {avg_order_book_time:.3f}s")

    def test_market_operation_benchmarks(self):
        """Test detailed benchmarks for specific market operations"""
        import time
        import statistics
        
        # Create test market and traders
        self.resource_manager.create_specialized_container("benchmark_market2", 100000.0, "market")
        self.resource_manager.create_specialized_container("bench_trader1", 10000.0, "merchant")
        self.resource_manager.create_specialized_container("bench_trader2", 10000.0, "merchant")
        
        # Initialize resources
        for trader_id in ["bench_trader1", "bench_trader2"]:
            self.resource_manager.add_resource(trader_id, ResourceType.GOLD, 50000.0)
            self.resource_manager.add_resource(trader_id, ResourceType.CRYSTAL, 1000.0)
            self.resource_manager.add_resource(trader_id, ResourceType.MANA_CRYSTAL, 500.0)
            
        benchmark_results = {}
        
        # Benchmark order cancellation
        cancel_times = []
        for _ in range(5):
            orders = []
            # Place orders
            for _ in range(100):
                order_id = self.resource_manager.place_limit_order(
                    "bench_trader1",
                    "benchmark_market2",
                    "sell",
                    ResourceType.CRYSTAL,
                    1.0,
                    100.0
                )
                orders.append(order_id)
                
            start_time = time.time()
            for order_id in orders:
                self.resource_manager.cancel_order("benchmark_market2", order_id)
            cancel_times.append(time.time() - start_time)
            
        benchmark_results["order_cancellation"] = statistics.mean(cancel_times)
        
        # Benchmark price calculation
        price_calc_times = []
        for _ in range(5):
            start_time = time.time()
            for _ in range(100):
                self.resource_manager.calculate_market_price(
                    "benchmark_market2",
                    ResourceType.CRYSTAL,
                    "buy",
                    10.0
                )
            price_calc_times.append(time.time() - start_time)
            
        benchmark_results["price_calculation"] = statistics.mean(price_calc_times)
        
        # Benchmark order book sorting
        sort_times = []
        for _ in range(5):
            # Place random orders
            for _ in range(100):
                price = 90.0 + random.random() * 20.0
                self.resource_manager.place_limit_order(
                    "bench_trader1",
                    "benchmark_market2",
                    "sell",
                    ResourceType.CRYSTAL,
                    1.0,
                    price
                )
                
            start_time = time.time()
            self.resource_manager.sort_order_book("benchmark_market2", ResourceType.CRYSTAL)
            sort_times.append(time.time() - start_time)
            
        benchmark_results["order_book_sorting"] = statistics.mean(sort_times)
        
        # Verify benchmark results
        for operation, avg_time in benchmark_results.items():
            self.assertLess(avg_time, 0.5, f"Slow performance for {operation}: {avg_time:.3f}s")
            
    def test_market_stress_scenarios(self):
        """Test market system under high-stress scenarios"""
        import threading
        import queue
        import random
        
        # Create stress test market and traders
        self.resource_manager.create_specialized_container("stress_market", 1000000.0, "market")
        trader_ids = [f"stress_trader_{i}" for i in range(10)]
        
        for trader_id in trader_ids:
            self.resource_manager.create_specialized_container(trader_id, 100000.0, "merchant")
            self.resource_manager.add_resource(trader_id, ResourceType.GOLD, 100000.0)
            self.resource_manager.add_resource(trader_id, ResourceType.CRYSTAL, 10000.0)
            
        def stress_worker(worker_id: int, results: queue.Queue):
            successes = 0
            failures = 0
            trader_id = f"stress_trader_{worker_id}"
            
            for _ in range(100):
                operation = random.choice([
                    "limit_order", "market_order", "cancel_order",
                    "price_check", "order_book_query"
                ])
                
                try:
                    if operation == "limit_order":
                        order_type = random.choice(["buy", "sell"])
                        price = 90.0 + random.random() * 20.0
                        success = self.resource_manager.place_limit_order(
                            trader_id,
                            "stress_market",
                            order_type,
                            ResourceType.CRYSTAL,
                            1.0,
                            price
                        ) is not None
                        
                    elif operation == "market_order":
                        order_type = random.choice(["buy", "sell"])
                        success = self.resource_manager.place_market_order(
                            trader_id,
                            "stress_market",
                            order_type,
                            ResourceType.CRYSTAL,
                            1.0
                        )
                        
                    elif operation == "cancel_order":
                        active_orders = self.resource_manager.get_active_orders(
                            "stress_market",
                            trader_id
                        )
                        if active_orders:
                            order_id = random.choice(active_orders)["id"]
                            success = self.resource_manager.cancel_order(
                                "stress_market",
                                order_id
                            )
                        else:
                            success = True
                            
                    elif operation == "price_check":
                        price = self.resource_manager.calculate_market_price(
                            "stress_market",
                            ResourceType.CRYSTAL,
                            "buy",
                            1.0
                        )
                        success = price > 0
                        
                    else:  # order_book_query
                        order_book = self.resource_manager.get_order_book(
                            "stress_market",
                            ResourceType.CRYSTAL
                        )
                        success = isinstance(order_book, dict)
                        
                    if success:
                        successes += 1
                    else:
                        failures += 1
                except Exception as e:
                    failures += 1
                    
            results.put((worker_id, successes, failures))
            
        # Run stress test
        results_queue = queue.Queue()
        threads = []
        
        start_time = time.time()
        
        for i in range(10):
            thread = threading.Thread(target=stress_worker, args=(i, results_queue))
            threads.append(thread)
            thread.start()
            
        for thread in threads:
            thread.join()
            
        end_time = time.time()
        
        # Analyze results
        total_successes = 0
        total_failures = 0
        while not results_queue.empty():
            _, successes, failures = results_queue.get()
            total_successes += successes
            total_failures += failures
            
        total_operations = num_threads * operations_per_thread
        success_rate = total_successes / total_operations
        
        self.assertGreaterEqual(success_rate, 0.95)
        self.assertLess(end_time - start_time, 10.0)
        
        # Verify market integrity
        for trader_id in trader_ids:
            gold = self.resource_manager.get_resource_amount(trader_id, ResourceType.GOLD)
            crystal = self.resource_manager.get_resource_amount(trader_id, ResourceType.CRYSTAL)
            self.assertGreaterEqual(gold, 0.0)
            self.assertGreaterEqual(crystal, 0.0)
            
    def test_market_system_integration(self):
        """Test market system integration with other game systems"""
        # Create test containers
        self.resource_manager.create_specialized_container("integration_market", 100000.0, "market")
        self.resource_manager.create_specialized_container("player_inventory", 10000.0, "player")
        self.resource_manager.create_specialized_container("quest_rewards", 10000.0, "quest")
        self.resource_manager.create_specialized_container("crafting_station", 10000.0, "crafting")
        
        # Initialize resources
        self.resource_manager.add_resource("player_inventory", ResourceType.GOLD, 10000.0)
        self.resource_manager.add_resource("player_inventory", ResourceType.CRYSTAL, 100.0)
        self.resource_manager.add_resource("quest_rewards", ResourceType.GOLD, 5000.0)
        self.resource_manager.add_resource("quest_rewards", ResourceType.CRYSTAL, 50.0)
        
        # Test market integration with quest system
        # Complete quest and sell rewards
        self.resource_manager.transfer_resources(
            "quest_rewards",
            "player_inventory",
            ResourceType.CRYSTAL,
            50.0
        )
        
        order_id = self.resource_manager.place_limit_order(
            "player_inventory",
            "integration_market",
            "sell",
            ResourceType.CRYSTAL,
            50.0,
            100.0
        )
        self.assertIsNotNone(order_id)
        
        # Test market integration with crafting system
        # Buy resources for crafting
        self.resource_manager.place_market_order(
            "player_inventory",
            "integration_market",
            "buy",
            ResourceType.MANA_CRYSTAL,
            10.0
        )
        
        # Attempt crafting with bought resources
        if self.resource_manager.has_resource("player_inventory", ResourceType.MANA_CRYSTAL, 5.0):
            self.resource_manager.transfer_resources(
                "player_inventory",
                "crafting_station",
                ResourceType.MANA_CRYSTAL,
                5.0
            )
            
            success = self.resource_manager.combine_resources(
                "crafting_station",
                [ResourceType.MANA_CRYSTAL],
                [5.0],
                ResourceType.ASTRAL_DUST
            )
            self.assertTrue(success)
            
        # Test market price impact on quest rewards
        initial_price = self.resource_manager.get_market_price(
            "integration_market",
            ResourceType.CRYSTAL
        )
        
        # Place multiple buy orders to drive up price
        for _ in range(5):
            self.resource_manager.place_limit_order(
                "player_inventory",
                "integration_market",
                "buy",
                ResourceType.CRYSTAL,
                10.0,
                initial_price * 1.1
            )
            
        new_price = self.resource_manager.get_market_price(
            "integration_market",
            ResourceType.CRYSTAL
        )
        self.assertGreater(new_price, initial_price)
        
        # Verify quest reward value adjustment
        quest_reward_value = new_price * 50.0  # Value of 50 crystals
        self.assertGreater(quest_reward_value, initial_price * 50.0)

if __name__ == '__main__':
    unittest.main() 