name: Elysian Nexus CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly security scan

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.4.0'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Bandit security scan
        uses: python-security/bandit-action@v1
        with:
          path: src/
          
      - name: Run dependency scan
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          
      - name: Run SAST
        uses: github/codeql-action/analyze@v2
        with:
          languages: python
          
  test:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true
          
      - name: Load cached dependencies
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
          
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction
        
      - name: Run unit tests
        run: |
          source .venv/bin/activate
          python -m pytest tests/ --cov=src --cov-report=xml -m "not performance and not stress"
          
      - name: Run performance tests
        run: |
          source .venv/bin/activate
          python -m pytest tests/ -m "performance" --junitxml=performance-results.xml
          
      - name: Run stress tests
        run: |
          source .venv/bin/activate
          python -m pytest tests/ -m "stress" --junitxml=stress-results.xml
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          
      - name: Archive test results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            performance-results.xml
            stress-results.xml

  lint:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snyk/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Install dependencies
        run: poetry install --no-interaction
          
      - name: Run linters
        run: |
          poetry run black --check src tests
          poetry run isort --check-only src tests
          poetry run flake8 src tests
          poetry run mypy src tests
          poetry run pylint src tests

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install Poetry
        uses: snyk/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          
      - name: Build package
        run: poetry build
        
      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  staging-deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment steps
          
      - name: Run integration tests
        run: |
          echo "Running integration tests against staging..."
          # Add integration test steps
          
      - name: Performance monitoring
        run: |
          echo "Monitoring staging performance..."
          # Add performance monitoring steps

  production-deploy:
    needs: staging-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: 
      name: production
      url: https://elysian-nexus.example.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/
          
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add production deployment steps
          
      - name: Verify deployment
        run: |
          echo "Verifying production deployment..."
          # Add health check steps
          
      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: dist/*
          generate_release_notes: true
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always()

  rollback:
    needs: [staging-deploy, production-deploy]
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback deployment
        run: |
          echo "Rolling back to previous stable version..."
          # Add rollback steps
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          text: "Deployment failed, rolling back to previous version"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 